#!/usr/bin/env ansible-playbook
---
- name: Configure this pattern's AAP Controller
  become: false
  connection: local
  hosts: localhost
  gather_facts: false
  vars:
    ansible_host: ""
    admin_password: ""
    secrets: ""
    controller_configuration_dir: /tmp/controller_configuration_dir
    entitle_aap: true
  tasks:
    - name: Assign variables for IAC Configuration
      ansible.builtin.set_fact:
        controller_hostname: "{{ ansible_host }}"
        controller_username: admin
        controller_password: "{{ admin_password }}"
        controller_validate_certs: false
        controller_configuration_secure_logging: false

    - name: Check on license key to determine need to entitle
      block:
        - name: Wait for API to become available
          retries: 300
          delay: 5
          until: config_check.status == 200
          ansible.builtin.uri:
            url: https://{{ ansible_host }}/api/v2/config/
            method: GET
            user: admin
            password: "{{ admin_password }}"
            body_format: json
            validate_certs: false
            force_basic_auth: true
          register: config_check
          no_log: true

        - name: Debug config_check status
          ansible.builtin.debug:
            var: config_check

        - name: Turn off entitlement if warranted
          ansible.builtin.set_fact:
            entitle_aap: false
          when:
            - config_check.json.license_info.valid_key

      rescue:
        - name: Notify that we are going to entitle
          ansible.builtin.debug:
            msg: "Could not get valid_key from license, entitling"

    - name: Load license via awx
      awx.awx.license:
        controller_host: "{{ ansible_host }}"
        controller_username: admin
        controller_password: "{{ admin_password }}"
        manifest: "{{ secrets.manifest_file_ref }}"
        validate_certs: false
      retries: 30
      delay: 10
      register: result
      until: result is not failed
      when: entitle_aap
    - name: Determine which repo to clone
      kubernetes.core.k8s_info:
        name: aap-configascode-cm
        namespace: ansible-automation-platform
        kind: ConfigMap
      register: repo_config

    - name: Checkout infrastructure-as-code repository
      ansible.builtin.git:
        repo: "{{ repo_config.resources[0].data.aap_configascode_repo }}"
        version: "{{ repo_config.resources[0].data.aap_configascode_revision }}"
        dest: "{{ controller_configuration_dir }}"
        clone: true
        update: true
        recursive: true

    - name: Include vars from infrastructure-as-code repository
      ansible.builtin.include_vars:
        dir: "{{ controller_configuration_dir }}"
        ignore_unknown_extensions: true
        extensions:
          - json
          - yaml
          - yml

    - name: Configure AAP Controller
      ansible.builtin.include_role:
        name: infra.controller_configuration.dispatch
